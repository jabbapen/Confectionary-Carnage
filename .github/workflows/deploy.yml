name: Terraform Apply and Tests

on:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff
        run: |
          cd backend
          ruff check .
          ruff format --check .

  type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install mypy
        run: |
          python -m pip install --upgrade pip
          pip install "mypy==1.13.0" types-psycopg2

      - name: Run mypy
        run: |
          cd backend
          mypy . --strict --ignore-missing-imports

  test:
    needs: [lint, type-check]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio httpx fastapi uvicorn psycopg2-binary mangum pydantic

      - name: Run tests
        env:
          PG_HOST: localhost
          PG_PORT: 5433
          PG_USER: test_user
          PG_PASSWORD: test_password
          PG_DATABASE: test_db
        run: |
          pytest -v

  terraform:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Configure AWS Credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "Configuring AWS credentials..."
        mkdir -p ~/.aws
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      env:
        TF_VAR_pg_port: ${{ secrets.TF_VAR_PG_PORT }}
        TF_VAR_pg_user: ${{ secrets.TF_VAR_PG_USER }}
        TF_VAR_pg_password: ${{ secrets.TF_VAR_PG_PASSWORD }}
        TF_VAR_pg_database: ${{ secrets.TF_VAR_PG_DATABASE }}
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      env:
        TF_VAR_pg_port: ${{ secrets.TF_VAR_PG_PORT }}
        TF_VAR_pg_user: ${{ secrets.TF_VAR_PG_USER }}
        TF_VAR_pg_password: ${{ secrets.TF_VAR_PG_PASSWORD }}
        TF_VAR_pg_database: ${{ secrets.TF_VAR_PG_DATABASE }}
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan